'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class ATIDAQFTDemoOptions
    Inherits DataSet
    
    Private tableDemoOptions As DemoOptionsDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("DemoOptions")) Is Nothing) Then
                Me.Tables.Add(New DemoOptionsDataTable(ds.Tables("DemoOptions")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DemoOptions As DemoOptionsDataTable
        Get
            Return Me.tableDemoOptions
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As ATIDAQFTDemoOptions = CType(MyBase.Clone,ATIDAQFTDemoOptions)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("DemoOptions")) Is Nothing) Then
            Me.Tables.Add(New DemoOptionsDataTable(ds.Tables("DemoOptions")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableDemoOptions = CType(Me.Tables("DemoOptions"),DemoOptionsDataTable)
        If (Not (Me.tableDemoOptions) Is Nothing) Then
            Me.tableDemoOptions.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "ATIDAQFTDemoOptions"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ATIDAQFTDemoOptions.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableDemoOptions = New DemoOptionsDataTable
        Me.Tables.Add(Me.tableDemoOptions)
    End Sub
    
    Private Function ShouldSerializeDemoOptions() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub DemoOptionsRowChangeEventHandler(ByVal sender As Object, ByVal e As DemoOptionsRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DemoOptionsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCalibrationFile As DataColumn
        
        Private columnDAQDeviceName As DataColumn
        
        Private columnDAQSampleRate As DataColumn
        
        Private columnAveraging As DataColumn
        
        Private columnDAQFirstChannel As DataColumn
        
        Private columnUseThermistor As DataColumn
        
        Private columnBufferSize As DataColumn
        
        Private columnForceUnits As DataColumn
        
        Private columnTorqueUnits As DataColumn
        
        Private columnDiagnosticSampleRate As DataColumn
        
        Private columnDiagnosticSampleSize As DataColumn
        
        Private columnDiagnosticAveraging As DataColumn
        
        Private columnXDisplacement As DataColumn
        
        Private columnYDisplacement As DataColumn
        
        Private columnZDisplacement As DataColumn
        
        Private columnXRotation As DataColumn
        
        Private columnYRotation As DataColumn
        
        Private columnZRotation As DataColumn
        
        Private columnDisplacementUnits As DataColumn
        
        Private columnRotationUnits As DataColumn
        
        Private columnFirstTimeRunning As DataColumn
        
        Private columnDiagnosticUseThermistor As DataColumn
        
        Private columnConnectionMode As DataColumn
        
        Friend Sub New()
            MyBase.New("DemoOptions")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CalibrationFileColumn As DataColumn
            Get
                Return Me.columnCalibrationFile
            End Get
        End Property
        
        Friend ReadOnly Property DAQDeviceNameColumn As DataColumn
            Get
                Return Me.columnDAQDeviceName
            End Get
        End Property
        
        Friend ReadOnly Property DAQSampleRateColumn As DataColumn
            Get
                Return Me.columnDAQSampleRate
            End Get
        End Property
        
        Friend ReadOnly Property AveragingColumn As DataColumn
            Get
                Return Me.columnAveraging
            End Get
        End Property
        
        Friend ReadOnly Property DAQFirstChannelColumn As DataColumn
            Get
                Return Me.columnDAQFirstChannel
            End Get
        End Property
        
        Friend ReadOnly Property UseThermistorColumn As DataColumn
            Get
                Return Me.columnUseThermistor
            End Get
        End Property
        
        Friend ReadOnly Property BufferSizeColumn As DataColumn
            Get
                Return Me.columnBufferSize
            End Get
        End Property
        
        Friend ReadOnly Property ForceUnitsColumn As DataColumn
            Get
                Return Me.columnForceUnits
            End Get
        End Property
        
        Friend ReadOnly Property TorqueUnitsColumn As DataColumn
            Get
                Return Me.columnTorqueUnits
            End Get
        End Property
        
        Friend ReadOnly Property DiagnosticSampleRateColumn As DataColumn
            Get
                Return Me.columnDiagnosticSampleRate
            End Get
        End Property
        
        Friend ReadOnly Property DiagnosticSampleSizeColumn As DataColumn
            Get
                Return Me.columnDiagnosticSampleSize
            End Get
        End Property
        
        Friend ReadOnly Property DiagnosticAveragingColumn As DataColumn
            Get
                Return Me.columnDiagnosticAveraging
            End Get
        End Property
        
        Friend ReadOnly Property XDisplacementColumn As DataColumn
            Get
                Return Me.columnXDisplacement
            End Get
        End Property
        
        Friend ReadOnly Property YDisplacementColumn As DataColumn
            Get
                Return Me.columnYDisplacement
            End Get
        End Property
        
        Friend ReadOnly Property ZDisplacementColumn As DataColumn
            Get
                Return Me.columnZDisplacement
            End Get
        End Property
        
        Friend ReadOnly Property XRotationColumn As DataColumn
            Get
                Return Me.columnXRotation
            End Get
        End Property
        
        Friend ReadOnly Property YRotationColumn As DataColumn
            Get
                Return Me.columnYRotation
            End Get
        End Property
        
        Friend ReadOnly Property ZRotationColumn As DataColumn
            Get
                Return Me.columnZRotation
            End Get
        End Property
        
        Friend ReadOnly Property DisplacementUnitsColumn As DataColumn
            Get
                Return Me.columnDisplacementUnits
            End Get
        End Property
        
        Friend ReadOnly Property RotationUnitsColumn As DataColumn
            Get
                Return Me.columnRotationUnits
            End Get
        End Property
        
        Friend ReadOnly Property FirstTimeRunningColumn As DataColumn
            Get
                Return Me.columnFirstTimeRunning
            End Get
        End Property
        
        Friend ReadOnly Property DiagnosticUseThermistorColumn As DataColumn
            Get
                Return Me.columnDiagnosticUseThermistor
            End Get
        End Property
        
        Friend ReadOnly Property ConnectionModeColumn As DataColumn
            Get
                Return Me.columnConnectionMode
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DemoOptionsRow
            Get
                Return CType(Me.Rows(index),DemoOptionsRow)
            End Get
        End Property
        
        Public Event DemoOptionsRowChanged As DemoOptionsRowChangeEventHandler
        
        Public Event DemoOptionsRowChanging As DemoOptionsRowChangeEventHandler
        
        Public Event DemoOptionsRowDeleted As DemoOptionsRowChangeEventHandler
        
        Public Event DemoOptionsRowDeleting As DemoOptionsRowChangeEventHandler
        
        Public Overloads Sub AddDemoOptionsRow(ByVal row As DemoOptionsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDemoOptionsRow( _
                    ByVal CalibrationFile As String,  _
                    ByVal DAQDeviceName As String,  _
                    ByVal DAQSampleRate As Double,  _
                    ByVal Averaging As Long,  _
                    ByVal DAQFirstChannel As Long,  _
                    ByVal UseThermistor As Boolean,  _
                    ByVal BufferSize As Long,  _
                    ByVal ForceUnits As String,  _
                    ByVal TorqueUnits As String,  _
                    ByVal DiagnosticSampleRate As Double,  _
                    ByVal DiagnosticSampleSize As Long,  _
                    ByVal DiagnosticAveraging As Long,  _
                    ByVal XDisplacement As Double,  _
                    ByVal YDisplacement As Double,  _
                    ByVal ZDisplacement As Double,  _
                    ByVal XRotation As Double,  _
                    ByVal YRotation As Double,  _
                    ByVal ZRotation As Double,  _
                    ByVal DisplacementUnits As String,  _
                    ByVal RotationUnits As String,  _
                    ByVal FirstTimeRunning As Boolean,  _
                    ByVal DiagnosticUseThermistor As Boolean,  _
                    ByVal ConnectionMode As String) As DemoOptionsRow
            Dim rowDemoOptionsRow As DemoOptionsRow = CType(Me.NewRow,DemoOptionsRow)
            rowDemoOptionsRow.ItemArray = New Object() {CalibrationFile, DAQDeviceName, DAQSampleRate, Averaging, DAQFirstChannel, UseThermistor, BufferSize, ForceUnits, TorqueUnits, DiagnosticSampleRate, DiagnosticSampleSize, DiagnosticAveraging, XDisplacement, YDisplacement, ZDisplacement, XRotation, YRotation, ZRotation, DisplacementUnits, RotationUnits, FirstTimeRunning, DiagnosticUseThermistor, ConnectionMode}
            Me.Rows.Add(rowDemoOptionsRow)
            Return rowDemoOptionsRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DemoOptionsDataTable = CType(MyBase.Clone,DemoOptionsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DemoOptionsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCalibrationFile = Me.Columns("CalibrationFile")
            Me.columnDAQDeviceName = Me.Columns("DAQDeviceName")
            Me.columnDAQSampleRate = Me.Columns("DAQSampleRate")
            Me.columnAveraging = Me.Columns("Averaging")
            Me.columnDAQFirstChannel = Me.Columns("DAQFirstChannel")
            Me.columnUseThermistor = Me.Columns("UseThermistor")
            Me.columnBufferSize = Me.Columns("BufferSize")
            Me.columnForceUnits = Me.Columns("ForceUnits")
            Me.columnTorqueUnits = Me.Columns("TorqueUnits")
            Me.columnDiagnosticSampleRate = Me.Columns("DiagnosticSampleRate")
            Me.columnDiagnosticSampleSize = Me.Columns("DiagnosticSampleSize")
            Me.columnDiagnosticAveraging = Me.Columns("DiagnosticAveraging")
            Me.columnXDisplacement = Me.Columns("XDisplacement")
            Me.columnYDisplacement = Me.Columns("YDisplacement")
            Me.columnZDisplacement = Me.Columns("ZDisplacement")
            Me.columnXRotation = Me.Columns("XRotation")
            Me.columnYRotation = Me.Columns("YRotation")
            Me.columnZRotation = Me.Columns("ZRotation")
            Me.columnDisplacementUnits = Me.Columns("DisplacementUnits")
            Me.columnRotationUnits = Me.Columns("RotationUnits")
            Me.columnFirstTimeRunning = Me.Columns("FirstTimeRunning")
            Me.columnDiagnosticUseThermistor = Me.Columns("DiagnosticUseThermistor")
            Me.columnConnectionMode = Me.Columns("ConnectionMode")
        End Sub
        
        Private Sub InitClass()
            Me.columnCalibrationFile = New DataColumn("CalibrationFile", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnCalibrationFile)
            Me.columnDAQDeviceName = New DataColumn("DAQDeviceName", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnDAQDeviceName)
            Me.columnDAQSampleRate = New DataColumn("DAQSampleRate", GetType(System.Double), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnDAQSampleRate)
            Me.columnAveraging = New DataColumn("Averaging", GetType(System.Int64), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnAveraging)
            Me.columnDAQFirstChannel = New DataColumn("DAQFirstChannel", GetType(System.Int64), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnDAQFirstChannel)
            Me.columnUseThermistor = New DataColumn("UseThermistor", GetType(System.Boolean), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnUseThermistor)
            Me.columnBufferSize = New DataColumn("BufferSize", GetType(System.Int64), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnBufferSize)
            Me.columnForceUnits = New DataColumn("ForceUnits", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnForceUnits)
            Me.columnTorqueUnits = New DataColumn("TorqueUnits", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnTorqueUnits)
            Me.columnDiagnosticSampleRate = New DataColumn("DiagnosticSampleRate", GetType(System.Double), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnDiagnosticSampleRate)
            Me.columnDiagnosticSampleSize = New DataColumn("DiagnosticSampleSize", GetType(System.Int64), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnDiagnosticSampleSize)
            Me.columnDiagnosticAveraging = New DataColumn("DiagnosticAveraging", GetType(System.Int64), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnDiagnosticAveraging)
            Me.columnXDisplacement = New DataColumn("XDisplacement", GetType(System.Double), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnXDisplacement)
            Me.columnYDisplacement = New DataColumn("YDisplacement", GetType(System.Double), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnYDisplacement)
            Me.columnZDisplacement = New DataColumn("ZDisplacement", GetType(System.Double), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnZDisplacement)
            Me.columnXRotation = New DataColumn("XRotation", GetType(System.Double), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnXRotation)
            Me.columnYRotation = New DataColumn("YRotation", GetType(System.Double), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnYRotation)
            Me.columnZRotation = New DataColumn("ZRotation", GetType(System.Double), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnZRotation)
            Me.columnDisplacementUnits = New DataColumn("DisplacementUnits", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnDisplacementUnits)
            Me.columnRotationUnits = New DataColumn("RotationUnits", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnRotationUnits)
            Me.columnFirstTimeRunning = New DataColumn("FirstTimeRunning", GetType(System.Boolean), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnFirstTimeRunning)
            Me.columnDiagnosticUseThermistor = New DataColumn("DiagnosticUseThermistor", GetType(System.Boolean), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnDiagnosticUseThermistor)
            Me.columnConnectionMode = New DataColumn("ConnectionMode", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnConnectionMode)
            Me.columnCalibrationFile.Namespace = ""
            Me.columnCalibrationFile.DefaultValue = ""
            Me.columnDAQDeviceName.Namespace = ""
            Me.columnDAQDeviceName.DefaultValue = "dev1"
            Me.columnDAQSampleRate.Namespace = ""
            Me.columnDAQSampleRate.DefaultValue = 1000
            Me.columnAveraging.Namespace = ""
            Me.columnAveraging.DefaultValue = 16
            Me.columnDAQFirstChannel.Namespace = ""
            Me.columnDAQFirstChannel.DefaultValue = 0
            Me.columnUseThermistor.Namespace = ""
            Me.columnUseThermistor.DefaultValue = true
            Me.columnBufferSize.Namespace = ""
            Me.columnBufferSize.DefaultValue = 500
            Me.columnForceUnits.Namespace = ""
            Me.columnTorqueUnits.Namespace = ""
            Me.columnDiagnosticSampleRate.Namespace = ""
            Me.columnDiagnosticSampleRate.DefaultValue = 1000
            Me.columnDiagnosticSampleSize.Namespace = ""
            Me.columnDiagnosticSampleSize.DefaultValue = 1000
            Me.columnDiagnosticAveraging.Namespace = ""
            Me.columnDiagnosticAveraging.DefaultValue = 1
            Me.columnXDisplacement.Namespace = ""
            Me.columnYDisplacement.Namespace = ""
            Me.columnZDisplacement.Namespace = ""
            Me.columnXRotation.Namespace = ""
            Me.columnYRotation.Namespace = ""
            Me.columnZRotation.Namespace = ""
            Me.columnDisplacementUnits.Namespace = ""
            Me.columnRotationUnits.Namespace = ""
            Me.columnFirstTimeRunning.Namespace = ""
            Me.columnDiagnosticUseThermistor.Namespace = ""
            Me.columnConnectionMode.Namespace = ""
        End Sub
        
        Public Function NewDemoOptionsRow() As DemoOptionsRow
            Return CType(Me.NewRow,DemoOptionsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DemoOptionsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DemoOptionsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DemoOptionsRowChangedEvent) Is Nothing) Then
                RaiseEvent DemoOptionsRowChanged(Me, New DemoOptionsRowChangeEvent(CType(e.Row,DemoOptionsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DemoOptionsRowChangingEvent) Is Nothing) Then
                RaiseEvent DemoOptionsRowChanging(Me, New DemoOptionsRowChangeEvent(CType(e.Row,DemoOptionsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DemoOptionsRowDeletedEvent) Is Nothing) Then
                RaiseEvent DemoOptionsRowDeleted(Me, New DemoOptionsRowChangeEvent(CType(e.Row,DemoOptionsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DemoOptionsRowDeletingEvent) Is Nothing) Then
                RaiseEvent DemoOptionsRowDeleting(Me, New DemoOptionsRowChangeEvent(CType(e.Row,DemoOptionsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDemoOptionsRow(ByVal row As DemoOptionsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DemoOptionsRow
        Inherits DataRow
        
        Private tableDemoOptions As DemoOptionsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDemoOptions = CType(Me.Table,DemoOptionsDataTable)
        End Sub
        
        Public Property CalibrationFile As String
            Get
                If Me.IsCalibrationFileNull Then
                    Return ""
                Else
                    Return CType(Me(Me.tableDemoOptions.CalibrationFileColumn),String)
                End If
            End Get
            Set
                Me(Me.tableDemoOptions.CalibrationFileColumn) = value
            End Set
        End Property
        
        Public Property DAQDeviceName As String
            Get
                If Me.IsDAQDeviceNameNull Then
                    Return "dev1"
                Else
                    Return CType(Me(Me.tableDemoOptions.DAQDeviceNameColumn),String)
                End If
            End Get
            Set
                Me(Me.tableDemoOptions.DAQDeviceNameColumn) = value
            End Set
        End Property
        
        Public Property DAQSampleRate As Double
            Get
                If Me.IsDAQSampleRateNull Then
                    Return 1000
                Else
                    Return CType(Me(Me.tableDemoOptions.DAQSampleRateColumn),Double)
                End If
            End Get
            Set
                Me(Me.tableDemoOptions.DAQSampleRateColumn) = value
            End Set
        End Property
        
        Public Property Averaging As Long
            Get
                If Me.IsAveragingNull Then
                    Return 16
                Else
                    Return CType(Me(Me.tableDemoOptions.AveragingColumn),Long)
                End If
            End Get
            Set
                Me(Me.tableDemoOptions.AveragingColumn) = value
            End Set
        End Property
        
        Public Property DAQFirstChannel As Long
            Get
                If Me.IsDAQFirstChannelNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableDemoOptions.DAQFirstChannelColumn),Long)
                End If
            End Get
            Set
                Me(Me.tableDemoOptions.DAQFirstChannelColumn) = value
            End Set
        End Property
        
        Public Property UseThermistor As Boolean
            Get
                If Me.IsUseThermistorNull Then
                    Return true
                Else
                    Return CType(Me(Me.tableDemoOptions.UseThermistorColumn),Boolean)
                End If
            End Get
            Set
                Me(Me.tableDemoOptions.UseThermistorColumn) = value
            End Set
        End Property
        
        Public Property BufferSize As Long
            Get
                If Me.IsBufferSizeNull Then
                    Return 500
                Else
                    Return CType(Me(Me.tableDemoOptions.BufferSizeColumn),Long)
                End If
            End Get
            Set
                Me(Me.tableDemoOptions.BufferSizeColumn) = value
            End Set
        End Property
        
        Public Property ForceUnits As String
            Get
                Try 
                    Return CType(Me(Me.tableDemoOptions.ForceUnitsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDemoOptions.ForceUnitsColumn) = value
            End Set
        End Property
        
        Public Property TorqueUnits As String
            Get
                Try 
                    Return CType(Me(Me.tableDemoOptions.TorqueUnitsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDemoOptions.TorqueUnitsColumn) = value
            End Set
        End Property
        
        Public Property DiagnosticSampleRate As Double
            Get
                If Me.IsDiagnosticSampleRateNull Then
                    Return 1000
                Else
                    Return CType(Me(Me.tableDemoOptions.DiagnosticSampleRateColumn),Double)
                End If
            End Get
            Set
                Me(Me.tableDemoOptions.DiagnosticSampleRateColumn) = value
            End Set
        End Property
        
        Public Property DiagnosticSampleSize As Long
            Get
                If Me.IsDiagnosticSampleSizeNull Then
                    Return 1000
                Else
                    Return CType(Me(Me.tableDemoOptions.DiagnosticSampleSizeColumn),Long)
                End If
            End Get
            Set
                Me(Me.tableDemoOptions.DiagnosticSampleSizeColumn) = value
            End Set
        End Property
        
        Public Property DiagnosticAveraging As Long
            Get
                If Me.IsDiagnosticAveragingNull Then
                    Return 1
                Else
                    Return CType(Me(Me.tableDemoOptions.DiagnosticAveragingColumn),Long)
                End If
            End Get
            Set
                Me(Me.tableDemoOptions.DiagnosticAveragingColumn) = value
            End Set
        End Property
        
        Public Property XDisplacement As Double
            Get
                If Me.IsXDisplacementNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableDemoOptions.XDisplacementColumn),Double)
                End If
            End Get
            Set
                Me(Me.tableDemoOptions.XDisplacementColumn) = value
            End Set
        End Property
        
        Public Property YDisplacement As Double
            Get
                If Me.IsYDisplacementNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableDemoOptions.YDisplacementColumn),Double)
                End If
            End Get
            Set
                Me(Me.tableDemoOptions.YDisplacementColumn) = value
            End Set
        End Property
        
        Public Property ZDisplacement As Double
            Get
                If Me.IsZDisplacementNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableDemoOptions.ZDisplacementColumn),Double)
                End If
            End Get
            Set
                Me(Me.tableDemoOptions.ZDisplacementColumn) = value
            End Set
        End Property
        
        Public Property XRotation As Double
            Get
                If Me.IsXRotationNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableDemoOptions.XRotationColumn),Double)
                End If
            End Get
            Set
                Me(Me.tableDemoOptions.XRotationColumn) = value
            End Set
        End Property
        
        Public Property YRotation As Double
            Get
                If Me.IsYRotationNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableDemoOptions.YRotationColumn),Double)
                End If
            End Get
            Set
                Me(Me.tableDemoOptions.YRotationColumn) = value
            End Set
        End Property
        
        Public Property ZRotation As Double
            Get
                If Me.IsZRotationNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableDemoOptions.ZRotationColumn),Double)
                End If
            End Get
            Set
                Me(Me.tableDemoOptions.ZRotationColumn) = value
            End Set
        End Property
        
        Public Property DisplacementUnits As String
            Get
                If Me.IsDisplacementUnitsNull Then
                    Return ""
                Else
                    Return CType(Me(Me.tableDemoOptions.DisplacementUnitsColumn),String)
                End If
            End Get
            Set
                Me(Me.tableDemoOptions.DisplacementUnitsColumn) = value
            End Set
        End Property
        
        Public Property RotationUnits As String
            Get
                If Me.IsRotationUnitsNull Then
                    Return ""
                Else
                    Return CType(Me(Me.tableDemoOptions.RotationUnitsColumn),String)
                End If
            End Get
            Set
                Me(Me.tableDemoOptions.RotationUnitsColumn) = value
            End Set
        End Property
        
        Public Property FirstTimeRunning As Boolean
            Get
                If Me.IsFirstTimeRunningNull Then
                    Return true
                Else
                    Return CType(Me(Me.tableDemoOptions.FirstTimeRunningColumn),Boolean)
                End If
            End Get
            Set
                Me(Me.tableDemoOptions.FirstTimeRunningColumn) = value
            End Set
        End Property
        
        Public Property DiagnosticUseThermistor As Boolean
            Get
                If Me.IsDiagnosticUseThermistorNull Then
                    Return true
                Else
                    Return CType(Me(Me.tableDemoOptions.DiagnosticUseThermistorColumn),Boolean)
                End If
            End Get
            Set
                Me(Me.tableDemoOptions.DiagnosticUseThermistorColumn) = value
            End Set
        End Property
        
        Public Property ConnectionMode As String
            Get
                If Me.IsConnectionModeNull Then
                    Return "DIFFERENTIAL"
                Else
                    Return CType(Me(Me.tableDemoOptions.ConnectionModeColumn),String)
                End If
            End Get
            Set
                Me(Me.tableDemoOptions.ConnectionModeColumn) = value
            End Set
        End Property
        
        Public Function IsCalibrationFileNull() As Boolean
            Return Me.IsNull(Me.tableDemoOptions.CalibrationFileColumn)
        End Function
        
        Public Sub SetCalibrationFileNull()
            Me(Me.tableDemoOptions.CalibrationFileColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDAQDeviceNameNull() As Boolean
            Return Me.IsNull(Me.tableDemoOptions.DAQDeviceNameColumn)
        End Function
        
        Public Sub SetDAQDeviceNameNull()
            Me(Me.tableDemoOptions.DAQDeviceNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDAQSampleRateNull() As Boolean
            Return Me.IsNull(Me.tableDemoOptions.DAQSampleRateColumn)
        End Function
        
        Public Sub SetDAQSampleRateNull()
            Me(Me.tableDemoOptions.DAQSampleRateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAveragingNull() As Boolean
            Return Me.IsNull(Me.tableDemoOptions.AveragingColumn)
        End Function
        
        Public Sub SetAveragingNull()
            Me(Me.tableDemoOptions.AveragingColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDAQFirstChannelNull() As Boolean
            Return Me.IsNull(Me.tableDemoOptions.DAQFirstChannelColumn)
        End Function
        
        Public Sub SetDAQFirstChannelNull()
            Me(Me.tableDemoOptions.DAQFirstChannelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUseThermistorNull() As Boolean
            Return Me.IsNull(Me.tableDemoOptions.UseThermistorColumn)
        End Function
        
        Public Sub SetUseThermistorNull()
            Me(Me.tableDemoOptions.UseThermistorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBufferSizeNull() As Boolean
            Return Me.IsNull(Me.tableDemoOptions.BufferSizeColumn)
        End Function
        
        Public Sub SetBufferSizeNull()
            Me(Me.tableDemoOptions.BufferSizeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsForceUnitsNull() As Boolean
            Return Me.IsNull(Me.tableDemoOptions.ForceUnitsColumn)
        End Function
        
        Public Sub SetForceUnitsNull()
            Me(Me.tableDemoOptions.ForceUnitsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTorqueUnitsNull() As Boolean
            Return Me.IsNull(Me.tableDemoOptions.TorqueUnitsColumn)
        End Function
        
        Public Sub SetTorqueUnitsNull()
            Me(Me.tableDemoOptions.TorqueUnitsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDiagnosticSampleRateNull() As Boolean
            Return Me.IsNull(Me.tableDemoOptions.DiagnosticSampleRateColumn)
        End Function
        
        Public Sub SetDiagnosticSampleRateNull()
            Me(Me.tableDemoOptions.DiagnosticSampleRateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDiagnosticSampleSizeNull() As Boolean
            Return Me.IsNull(Me.tableDemoOptions.DiagnosticSampleSizeColumn)
        End Function
        
        Public Sub SetDiagnosticSampleSizeNull()
            Me(Me.tableDemoOptions.DiagnosticSampleSizeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDiagnosticAveragingNull() As Boolean
            Return Me.IsNull(Me.tableDemoOptions.DiagnosticAveragingColumn)
        End Function
        
        Public Sub SetDiagnosticAveragingNull()
            Me(Me.tableDemoOptions.DiagnosticAveragingColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsXDisplacementNull() As Boolean
            Return Me.IsNull(Me.tableDemoOptions.XDisplacementColumn)
        End Function
        
        Public Sub SetXDisplacementNull()
            Me(Me.tableDemoOptions.XDisplacementColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsYDisplacementNull() As Boolean
            Return Me.IsNull(Me.tableDemoOptions.YDisplacementColumn)
        End Function
        
        Public Sub SetYDisplacementNull()
            Me(Me.tableDemoOptions.YDisplacementColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsZDisplacementNull() As Boolean
            Return Me.IsNull(Me.tableDemoOptions.ZDisplacementColumn)
        End Function
        
        Public Sub SetZDisplacementNull()
            Me(Me.tableDemoOptions.ZDisplacementColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsXRotationNull() As Boolean
            Return Me.IsNull(Me.tableDemoOptions.XRotationColumn)
        End Function
        
        Public Sub SetXRotationNull()
            Me(Me.tableDemoOptions.XRotationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsYRotationNull() As Boolean
            Return Me.IsNull(Me.tableDemoOptions.YRotationColumn)
        End Function
        
        Public Sub SetYRotationNull()
            Me(Me.tableDemoOptions.YRotationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsZRotationNull() As Boolean
            Return Me.IsNull(Me.tableDemoOptions.ZRotationColumn)
        End Function
        
        Public Sub SetZRotationNull()
            Me(Me.tableDemoOptions.ZRotationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDisplacementUnitsNull() As Boolean
            Return Me.IsNull(Me.tableDemoOptions.DisplacementUnitsColumn)
        End Function
        
        Public Sub SetDisplacementUnitsNull()
            Me(Me.tableDemoOptions.DisplacementUnitsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRotationUnitsNull() As Boolean
            Return Me.IsNull(Me.tableDemoOptions.RotationUnitsColumn)
        End Function
        
        Public Sub SetRotationUnitsNull()
            Me(Me.tableDemoOptions.RotationUnitsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFirstTimeRunningNull() As Boolean
            Return Me.IsNull(Me.tableDemoOptions.FirstTimeRunningColumn)
        End Function
        
        Public Sub SetFirstTimeRunningNull()
            Me(Me.tableDemoOptions.FirstTimeRunningColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDiagnosticUseThermistorNull() As Boolean
            Return Me.IsNull(Me.tableDemoOptions.DiagnosticUseThermistorColumn)
        End Function
        
        Public Sub SetDiagnosticUseThermistorNull()
            Me(Me.tableDemoOptions.DiagnosticUseThermistorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsConnectionModeNull() As Boolean
            Return Me.IsNull(Me.tableDemoOptions.ConnectionModeColumn)
        End Function
        
        Public Sub SetConnectionModeNull()
            Me(Me.tableDemoOptions.ConnectionModeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DemoOptionsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DemoOptionsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DemoOptionsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DemoOptionsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
